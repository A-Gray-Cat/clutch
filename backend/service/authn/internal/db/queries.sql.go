// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package authndb

import (
	"context"
)

const createOrUpdateUser = `-- name: CreateOrUpdateUser :one
INSERT INTO authn (id) VALUES ($1)
ON CONFLICT (id)
DO UPDATE SET
    updated_at = NOW()
RETURNING id, updated_at
`

func (q *Queries) CreateOrUpdateUser(ctx context.Context, id string) (Authn, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUser, id)
	var i Authn
	err := row.Scan(&i.ID, &i.UpdatedAt)
	return i, err
}

const listUserAuthn = `-- name: ListUserAuthn :many
SELECT id, updated_at FROM authn
`

func (q *Queries) ListUserAuthn(ctx context.Context) ([]Authn, error) {
	rows, err := q.db.QueryContext(ctx, listUserAuthn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authn
	for rows.Next() {
		var i Authn
		if err := rows.Scan(&i.ID, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
