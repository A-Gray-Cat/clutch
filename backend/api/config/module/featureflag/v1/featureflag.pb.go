// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config/module/featureflag/v1/featureflag.proto

package featureflagv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Simple struct {
	Flags                map[string]bool `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Simple) Reset()         { *m = Simple{} }
func (m *Simple) String() string { return proto.CompactTextString(m) }
func (*Simple) ProtoMessage()    {}
func (*Simple) Descriptor() ([]byte, []int) {
	return fileDescriptor_5176654319143250, []int{0}
}

func (m *Simple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Simple.Unmarshal(m, b)
}
func (m *Simple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Simple.Marshal(b, m, deterministic)
}
func (m *Simple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Simple.Merge(m, src)
}
func (m *Simple) XXX_Size() int {
	return xxx_messageInfo_Simple.Size(m)
}
func (m *Simple) XXX_DiscardUnknown() {
	xxx_messageInfo_Simple.DiscardUnknown(m)
}

var xxx_messageInfo_Simple proto.InternalMessageInfo

func (m *Simple) GetFlags() map[string]bool {
	if m != nil {
		return m.Flags
	}
	return nil
}

type Config struct {
	// Types that are valid to be assigned to Type:
	//	*Config_Simple
	Type                 isConfig_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5176654319143250, []int{1}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

type isConfig_Type interface {
	isConfig_Type()
}

type Config_Simple struct {
	Simple *Simple `protobuf:"bytes,1,opt,name=simple,proto3,oneof"`
}

func (*Config_Simple) isConfig_Type() {}

func (m *Config) GetType() isConfig_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Config) GetSimple() *Simple {
	if x, ok := m.GetType().(*Config_Simple); ok {
		return x.Simple
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Config) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Config_Simple)(nil),
	}
}

func init() {
	proto.RegisterType((*Simple)(nil), "clutch.config.module.featureflag.v1.Simple")
	proto.RegisterMapType((map[string]bool)(nil), "clutch.config.module.featureflag.v1.Simple.FlagsEntry")
	proto.RegisterType((*Config)(nil), "clutch.config.module.featureflag.v1.Config")
}

func init() {
	proto.RegisterFile("config/module/featureflag/v1/featureflag.proto", fileDescriptor_5176654319143250)
}

var fileDescriptor_5176654319143250 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0xcf, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0xd5, 0x4f, 0x4b, 0x4d, 0x2c, 0x29, 0x2d,
	0x4a, 0x4d, 0xcb, 0x49, 0x4c, 0xd7, 0x2f, 0x33, 0x44, 0xe6, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4,
	0x0b, 0x29, 0x27, 0xe7, 0x94, 0x96, 0x24, 0x67, 0x40, 0xb5, 0xe9, 0x41, 0xb4, 0xe9, 0x21, 0xab,
	0x2b, 0x33, 0x54, 0x9a, 0xc0, 0xc8, 0xc5, 0x16, 0x9c, 0x99, 0x5b, 0x90, 0x93, 0x2a, 0xe4, 0xc3,
	0xc5, 0x0a, 0x12, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x32, 0xd3, 0x23, 0x42, 0xbf,
	0x1e, 0x44, 0xaf, 0x9e, 0x1b, 0x48, 0xa3, 0x6b, 0x5e, 0x49, 0x51, 0x65, 0x10, 0xc4, 0x10, 0x29,
	0x0b, 0x2e, 0x2e, 0x84, 0xa0, 0x90, 0x00, 0x17, 0x73, 0x76, 0x6a, 0xa5, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0x2a, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x2a, 0x85, 0x73, 0xb1, 0x39, 0x83,
	0xad, 0x14, 0x72, 0xe5, 0x62, 0x2b, 0x06, 0x9b, 0x0f, 0xd6, 0xc8, 0x6d, 0xa4, 0x4d, 0x82, 0x93,
	0x3c, 0x18, 0x82, 0xa0, 0x9a, 0x9d, 0xd8, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x9d, 0xf8, 0xa3,
	0x78, 0x91, 0x94, 0x96, 0x19, 0x26, 0xb1, 0x81, 0x03, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x88, 0x35, 0xb0, 0xf4, 0x5a, 0x01, 0x00, 0x00,
}
